// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_runtime_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_runtime_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "parameter.pb.h"
#include "value.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_runtime_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_runtime_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runtime_2eproto;
namespace ntt {
class RunRequest;
class RunRequestDefaultTypeInternal;
extern RunRequestDefaultTypeInternal _RunRequest_default_instance_;
class RunResponse;
class RunResponseDefaultTypeInternal;
extern RunResponseDefaultTypeInternal _RunResponse_default_instance_;
}  // namespace ntt
PROTOBUF_NAMESPACE_OPEN
template<> ::ntt::RunRequest* Arena::CreateMaybeMessage<::ntt::RunRequest>(Arena*);
template<> ::ntt::RunResponse* Arena::CreateMaybeMessage<::ntt::RunResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ntt {

// ===================================================================

class RunRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ntt.RunRequest) */ {
 public:
  RunRequest();
  virtual ~RunRequest();

  RunRequest(const RunRequest& from);
  RunRequest(RunRequest&& from) noexcept
    : RunRequest() {
    *this = ::std::move(from);
  }

  inline RunRequest& operator=(const RunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunRequest& operator=(RunRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunRequest* internal_default_instance() {
    return reinterpret_cast<const RunRequest*>(
               &_RunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RunRequest& a, RunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RunRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunRequest* New() const final {
    return CreateMaybeMessage<RunRequest>(nullptr);
  }

  RunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunRequest& from);
  void MergeFrom(const RunRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ntt.RunRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2eproto);
    return ::descriptor_table_runtime_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kTestNameFieldNumber = 1,
  };
  // repeated .ntt.Parameter parameters = 2;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::ntt::Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ntt::Parameter >*
      mutable_parameters();
  private:
  const ::ntt::Parameter& _internal_parameters(int index) const;
  ::ntt::Parameter* _internal_add_parameters();
  public:
  const ::ntt::Parameter& parameters(int index) const;
  ::ntt::Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ntt::Parameter >&
      parameters() const;

  // string test_name = 1;
  void clear_test_name();
  const std::string& test_name() const;
  void set_test_name(const std::string& value);
  void set_test_name(std::string&& value);
  void set_test_name(const char* value);
  void set_test_name(const char* value, size_t size);
  std::string* mutable_test_name();
  std::string* release_test_name();
  void set_allocated_test_name(std::string* test_name);
  private:
  const std::string& _internal_test_name() const;
  void _internal_set_test_name(const std::string& value);
  std::string* _internal_mutable_test_name();
  public:

  // @@protoc_insertion_point(class_scope:ntt.RunRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ntt::Parameter > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2eproto;
};
// -------------------------------------------------------------------

class RunResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ntt.RunResponse) */ {
 public:
  RunResponse();
  virtual ~RunResponse();

  RunResponse(const RunResponse& from);
  RunResponse(RunResponse&& from) noexcept
    : RunResponse() {
    *this = ::std::move(from);
  }

  inline RunResponse& operator=(const RunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunResponse& operator=(RunResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunResponse* internal_default_instance() {
    return reinterpret_cast<const RunResponse*>(
               &_RunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RunResponse& a, RunResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RunResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunResponse* New() const final {
    return CreateMaybeMessage<RunResponse>(nullptr);
  }

  RunResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunResponse& from);
  void MergeFrom(const RunResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ntt.RunResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2eproto);
    return ::descriptor_table_runtime_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kTestNameFieldNumber = 1,
    kVerdictFieldNumber = 3,
  };
  // repeated .ntt.Parameter parameters = 2;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::ntt::Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ntt::Parameter >*
      mutable_parameters();
  private:
  const ::ntt::Parameter& _internal_parameters(int index) const;
  ::ntt::Parameter* _internal_add_parameters();
  public:
  const ::ntt::Parameter& parameters(int index) const;
  ::ntt::Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ntt::Parameter >&
      parameters() const;

  // string test_name = 1;
  void clear_test_name();
  const std::string& test_name() const;
  void set_test_name(const std::string& value);
  void set_test_name(std::string&& value);
  void set_test_name(const char* value);
  void set_test_name(const char* value, size_t size);
  std::string* mutable_test_name();
  std::string* release_test_name();
  void set_allocated_test_name(std::string* test_name);
  private:
  const std::string& _internal_test_name() const;
  void _internal_set_test_name(const std::string& value);
  std::string* _internal_mutable_test_name();
  public:

  // .ntt.Verdict verdict = 3;
  void clear_verdict();
  ::ntt::Verdict verdict() const;
  void set_verdict(::ntt::Verdict value);
  private:
  ::ntt::Verdict _internal_verdict() const;
  void _internal_set_verdict(::ntt::Verdict value);
  public:

  // @@protoc_insertion_point(class_scope:ntt.RunResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ntt::Parameter > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_name_;
  int verdict_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RunRequest

// string test_name = 1;
inline void RunRequest::clear_test_name() {
  test_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RunRequest::test_name() const {
  // @@protoc_insertion_point(field_get:ntt.RunRequest.test_name)
  return _internal_test_name();
}
inline void RunRequest::set_test_name(const std::string& value) {
  _internal_set_test_name(value);
  // @@protoc_insertion_point(field_set:ntt.RunRequest.test_name)
}
inline std::string* RunRequest::mutable_test_name() {
  // @@protoc_insertion_point(field_mutable:ntt.RunRequest.test_name)
  return _internal_mutable_test_name();
}
inline const std::string& RunRequest::_internal_test_name() const {
  return test_name_.GetNoArena();
}
inline void RunRequest::_internal_set_test_name(const std::string& value) {
  
  test_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RunRequest::set_test_name(std::string&& value) {
  
  test_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntt.RunRequest.test_name)
}
inline void RunRequest::set_test_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntt.RunRequest.test_name)
}
inline void RunRequest::set_test_name(const char* value, size_t size) {
  
  test_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntt.RunRequest.test_name)
}
inline std::string* RunRequest::_internal_mutable_test_name() {
  
  return test_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RunRequest::release_test_name() {
  // @@protoc_insertion_point(field_release:ntt.RunRequest.test_name)
  
  return test_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RunRequest::set_allocated_test_name(std::string* test_name) {
  if (test_name != nullptr) {
    
  } else {
    
  }
  test_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test_name);
  // @@protoc_insertion_point(field_set_allocated:ntt.RunRequest.test_name)
}

// repeated .ntt.Parameter parameters = 2;
inline int RunRequest::_internal_parameters_size() const {
  return parameters_.size();
}
inline int RunRequest::parameters_size() const {
  return _internal_parameters_size();
}
inline ::ntt::Parameter* RunRequest::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:ntt.RunRequest.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ntt::Parameter >*
RunRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:ntt.RunRequest.parameters)
  return &parameters_;
}
inline const ::ntt::Parameter& RunRequest::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::ntt::Parameter& RunRequest::parameters(int index) const {
  // @@protoc_insertion_point(field_get:ntt.RunRequest.parameters)
  return _internal_parameters(index);
}
inline ::ntt::Parameter* RunRequest::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::ntt::Parameter* RunRequest::add_parameters() {
  // @@protoc_insertion_point(field_add:ntt.RunRequest.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ntt::Parameter >&
RunRequest::parameters() const {
  // @@protoc_insertion_point(field_list:ntt.RunRequest.parameters)
  return parameters_;
}

// -------------------------------------------------------------------

// RunResponse

// string test_name = 1;
inline void RunResponse::clear_test_name() {
  test_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RunResponse::test_name() const {
  // @@protoc_insertion_point(field_get:ntt.RunResponse.test_name)
  return _internal_test_name();
}
inline void RunResponse::set_test_name(const std::string& value) {
  _internal_set_test_name(value);
  // @@protoc_insertion_point(field_set:ntt.RunResponse.test_name)
}
inline std::string* RunResponse::mutable_test_name() {
  // @@protoc_insertion_point(field_mutable:ntt.RunResponse.test_name)
  return _internal_mutable_test_name();
}
inline const std::string& RunResponse::_internal_test_name() const {
  return test_name_.GetNoArena();
}
inline void RunResponse::_internal_set_test_name(const std::string& value) {
  
  test_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RunResponse::set_test_name(std::string&& value) {
  
  test_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntt.RunResponse.test_name)
}
inline void RunResponse::set_test_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntt.RunResponse.test_name)
}
inline void RunResponse::set_test_name(const char* value, size_t size) {
  
  test_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntt.RunResponse.test_name)
}
inline std::string* RunResponse::_internal_mutable_test_name() {
  
  return test_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RunResponse::release_test_name() {
  // @@protoc_insertion_point(field_release:ntt.RunResponse.test_name)
  
  return test_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RunResponse::set_allocated_test_name(std::string* test_name) {
  if (test_name != nullptr) {
    
  } else {
    
  }
  test_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test_name);
  // @@protoc_insertion_point(field_set_allocated:ntt.RunResponse.test_name)
}

// repeated .ntt.Parameter parameters = 2;
inline int RunResponse::_internal_parameters_size() const {
  return parameters_.size();
}
inline int RunResponse::parameters_size() const {
  return _internal_parameters_size();
}
inline ::ntt::Parameter* RunResponse::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:ntt.RunResponse.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ntt::Parameter >*
RunResponse::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:ntt.RunResponse.parameters)
  return &parameters_;
}
inline const ::ntt::Parameter& RunResponse::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::ntt::Parameter& RunResponse::parameters(int index) const {
  // @@protoc_insertion_point(field_get:ntt.RunResponse.parameters)
  return _internal_parameters(index);
}
inline ::ntt::Parameter* RunResponse::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::ntt::Parameter* RunResponse::add_parameters() {
  // @@protoc_insertion_point(field_add:ntt.RunResponse.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ntt::Parameter >&
RunResponse::parameters() const {
  // @@protoc_insertion_point(field_list:ntt.RunResponse.parameters)
  return parameters_;
}

// .ntt.Verdict verdict = 3;
inline void RunResponse::clear_verdict() {
  verdict_ = 0;
}
inline ::ntt::Verdict RunResponse::_internal_verdict() const {
  return static_cast< ::ntt::Verdict >(verdict_);
}
inline ::ntt::Verdict RunResponse::verdict() const {
  // @@protoc_insertion_point(field_get:ntt.RunResponse.verdict)
  return _internal_verdict();
}
inline void RunResponse::_internal_set_verdict(::ntt::Verdict value) {
  
  verdict_ = value;
}
inline void RunResponse::set_verdict(::ntt::Verdict value) {
  _internal_set_verdict(value);
  // @@protoc_insertion_point(field_set:ntt.RunResponse.verdict)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ntt

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_runtime_2eproto
