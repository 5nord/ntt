// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: codec.proto

#include "codec.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_BinaryString_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinaryString_BinaryString_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_value_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Composite_value_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_type_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Field_type_2eproto;
namespace ntt {
class DecodeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecodeRequest> _instance;
} _DecodeRequest_default_instance_;
class DecodeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecodeResponse> _instance;
} _DecodeResponse_default_instance_;
}  // namespace ntt
static void InitDefaultsscc_info_DecodeRequest_codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ntt::_DecodeRequest_default_instance_;
    new (ptr) ::ntt::DecodeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ntt::DecodeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DecodeRequest_codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DecodeRequest_codec_2eproto}, {
      &scc_info_BinaryString_BinaryString_2eproto.base,
      &scc_info_Field_type_2eproto.base,}};

static void InitDefaultsscc_info_DecodeResponse_codec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ntt::_DecodeResponse_default_instance_;
    new (ptr) ::ntt::DecodeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ntt::DecodeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DecodeResponse_codec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DecodeResponse_codec_2eproto}, {
      &scc_info_Composite_value_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_codec_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_codec_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_codec_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_codec_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::DecodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ntt::DecodeRequest, bytes_),
  PROTOBUF_FIELD_OFFSET(::ntt::DecodeRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::DecodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ntt::DecodeResponse, nbits_),
  PROTOBUF_FIELD_OFFSET(::ntt::DecodeResponse, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ntt::DecodeRequest)},
  { 7, -1, sizeof(::ntt::DecodeResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_DecodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_DecodeResponse_default_instance_),
};

const char descriptor_table_protodef_codec_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013codec.proto\022\003ntt\032\022BinaryString.proto\032\n"
  "type.proto\032\013value.proto\"J\n\rDecodeRequest"
  "\022 \n\005bytes\030\001 \001(\0132\021.ntt.BinaryString\022\027\n\004ty"
  "pe\030\002 \001(\0132\t.ntt.Type\":\n\016DecodeResponse\022\r\n"
  "\005nbits\030\001 \001(\005\022\031\n\005value\030\002 \001(\0132\n.ntt.Value2"
  "g\n\005Codec\022)\n\006Encode\022\n.ntt.Value\032\021.ntt.Bin"
  "aryString\"\000\0223\n\006Decode\022\022.ntt.DecodeReques"
  "t\032\023.ntt.DecodeResponse\"\000B\037Z\035github.com/n"
  "okia/ntt/protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_codec_2eproto_deps[3] = {
  &::descriptor_table_BinaryString_2eproto,
  &::descriptor_table_type_2eproto,
  &::descriptor_table_value_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_codec_2eproto_sccs[2] = {
  &scc_info_DecodeRequest_codec_2eproto.base,
  &scc_info_DecodeResponse_codec_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_codec_2eproto_once;
static bool descriptor_table_codec_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_codec_2eproto = {
  &descriptor_table_codec_2eproto_initialized, descriptor_table_protodef_codec_2eproto, "codec.proto", 345,
  &descriptor_table_codec_2eproto_once, descriptor_table_codec_2eproto_sccs, descriptor_table_codec_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_codec_2eproto::offsets,
  file_level_metadata_codec_2eproto, 2, file_level_enum_descriptors_codec_2eproto, file_level_service_descriptors_codec_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_codec_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_codec_2eproto), true);
namespace ntt {

// ===================================================================

void DecodeRequest::InitAsDefaultInstance() {
  ::ntt::_DecodeRequest_default_instance_._instance.get_mutable()->bytes_ = const_cast< ::ntt::BinaryString*>(
      ::ntt::BinaryString::internal_default_instance());
  ::ntt::_DecodeRequest_default_instance_._instance.get_mutable()->type_ = const_cast< ::ntt::Type*>(
      ::ntt::Type::internal_default_instance());
}
class DecodeRequest::_Internal {
 public:
  static const ::ntt::BinaryString& bytes(const DecodeRequest* msg);
  static const ::ntt::Type& type(const DecodeRequest* msg);
};

const ::ntt::BinaryString&
DecodeRequest::_Internal::bytes(const DecodeRequest* msg) {
  return *msg->bytes_;
}
const ::ntt::Type&
DecodeRequest::_Internal::type(const DecodeRequest* msg) {
  return *msg->type_;
}
void DecodeRequest::clear_bytes() {
  if (GetArenaNoVirtual() == nullptr && bytes_ != nullptr) {
    delete bytes_;
  }
  bytes_ = nullptr;
}
void DecodeRequest::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
DecodeRequest::DecodeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.DecodeRequest)
}
DecodeRequest::DecodeRequest(const DecodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_bytes()) {
    bytes_ = new ::ntt::BinaryString(*from.bytes_);
  } else {
    bytes_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::ntt::Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ntt.DecodeRequest)
}

void DecodeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecodeRequest_codec_2eproto.base);
  ::memset(&bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&bytes_)) + sizeof(type_));
}

DecodeRequest::~DecodeRequest() {
  // @@protoc_insertion_point(destructor:ntt.DecodeRequest)
  SharedDtor();
}

void DecodeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete bytes_;
  if (this != internal_default_instance()) delete type_;
}

void DecodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecodeRequest& DecodeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecodeRequest_codec_2eproto.base);
  return *internal_default_instance();
}


void DecodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.DecodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && bytes_ != nullptr) {
    delete bytes_;
  }
  bytes_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DecodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ntt.BinaryString bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.DecodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ntt.BinaryString bytes = 1;
  if (this->has_bytes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bytes(this), target, stream);
  }

  // .ntt.Type type = 2;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.DecodeRequest)
  return target;
}

size_t DecodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.DecodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ntt.BinaryString bytes = 1;
  if (this->has_bytes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bytes_);
  }

  // .ntt.Type type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.DecodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DecodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.DecodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.DecodeRequest)
    MergeFrom(*source);
  }
}

void DecodeRequest::MergeFrom(const DecodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.DecodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bytes()) {
    _internal_mutable_bytes()->::ntt::BinaryString::MergeFrom(from._internal_bytes());
  }
  if (from.has_type()) {
    _internal_mutable_type()->::ntt::Type::MergeFrom(from._internal_type());
  }
}

void DecodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.DecodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecodeRequest::CopyFrom(const DecodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.DecodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecodeRequest::IsInitialized() const {
  return true;
}

void DecodeRequest::InternalSwap(DecodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bytes_, other->bytes_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecodeResponse::InitAsDefaultInstance() {
  ::ntt::_DecodeResponse_default_instance_._instance.get_mutable()->value_ = const_cast< ::ntt::Value*>(
      ::ntt::Value::internal_default_instance());
}
class DecodeResponse::_Internal {
 public:
  static const ::ntt::Value& value(const DecodeResponse* msg);
};

const ::ntt::Value&
DecodeResponse::_Internal::value(const DecodeResponse* msg) {
  return *msg->value_;
}
void DecodeResponse::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
DecodeResponse::DecodeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.DecodeResponse)
}
DecodeResponse::DecodeResponse(const DecodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::ntt::Value(*from.value_);
  } else {
    value_ = nullptr;
  }
  nbits_ = from.nbits_;
  // @@protoc_insertion_point(copy_constructor:ntt.DecodeResponse)
}

void DecodeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecodeResponse_codec_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nbits_) -
      reinterpret_cast<char*>(&value_)) + sizeof(nbits_));
}

DecodeResponse::~DecodeResponse() {
  // @@protoc_insertion_point(destructor:ntt.DecodeResponse)
  SharedDtor();
}

void DecodeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void DecodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecodeResponse& DecodeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecodeResponse_codec_2eproto.base);
  return *internal_default_instance();
}


void DecodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.DecodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  nbits_ = 0;
  _internal_metadata_.Clear();
}

const char* DecodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 nbits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nbits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.Value value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecodeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.DecodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nbits = 1;
  if (this->nbits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nbits(), target);
  }

  // .ntt.Value value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.DecodeResponse)
  return target;
}

size_t DecodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.DecodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ntt.Value value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // int32 nbits = 1;
  if (this->nbits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nbits());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.DecodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DecodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.DecodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.DecodeResponse)
    MergeFrom(*source);
  }
}

void DecodeResponse::MergeFrom(const DecodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.DecodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::ntt::Value::MergeFrom(from._internal_value());
  }
  if (from.nbits() != 0) {
    _internal_set_nbits(from._internal_nbits());
  }
}

void DecodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.DecodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecodeResponse::CopyFrom(const DecodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.DecodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecodeResponse::IsInitialized() const {
  return true;
}

void DecodeResponse::InternalSwap(DecodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(nbits_, other->nbits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ntt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ntt::DecodeRequest* Arena::CreateMaybeMessage< ::ntt::DecodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::DecodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ntt::DecodeResponse* Arena::CreateMaybeMessage< ::ntt::DecodeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::DecodeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
