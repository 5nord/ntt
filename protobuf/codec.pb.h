// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: codec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_codec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_codec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "BinaryString.pb.h"
#include "type.pb.h"
#include "value.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_codec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_codec_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_codec_2eproto;
namespace ntt {
class DecodeRequest;
class DecodeRequestDefaultTypeInternal;
extern DecodeRequestDefaultTypeInternal _DecodeRequest_default_instance_;
class DecodeResponse;
class DecodeResponseDefaultTypeInternal;
extern DecodeResponseDefaultTypeInternal _DecodeResponse_default_instance_;
}  // namespace ntt
PROTOBUF_NAMESPACE_OPEN
template<> ::ntt::DecodeRequest* Arena::CreateMaybeMessage<::ntt::DecodeRequest>(Arena*);
template<> ::ntt::DecodeResponse* Arena::CreateMaybeMessage<::ntt::DecodeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ntt {

// ===================================================================

class DecodeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ntt.DecodeRequest) */ {
 public:
  DecodeRequest();
  virtual ~DecodeRequest();

  DecodeRequest(const DecodeRequest& from);
  DecodeRequest(DecodeRequest&& from) noexcept
    : DecodeRequest() {
    *this = ::std::move(from);
  }

  inline DecodeRequest& operator=(const DecodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecodeRequest& operator=(DecodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecodeRequest* internal_default_instance() {
    return reinterpret_cast<const DecodeRequest*>(
               &_DecodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DecodeRequest& a, DecodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DecodeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecodeRequest* New() const final {
    return CreateMaybeMessage<DecodeRequest>(nullptr);
  }

  DecodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecodeRequest& from);
  void MergeFrom(const DecodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ntt.DecodeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_codec_2eproto);
    return ::descriptor_table_codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .ntt.BinaryString bytes = 1;
  bool has_bytes() const;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  const ::ntt::BinaryString& bytes() const;
  ::ntt::BinaryString* release_bytes();
  ::ntt::BinaryString* mutable_bytes();
  void set_allocated_bytes(::ntt::BinaryString* bytes);
  private:
  const ::ntt::BinaryString& _internal_bytes() const;
  ::ntt::BinaryString* _internal_mutable_bytes();
  public:

  // .ntt.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::ntt::Type& type() const;
  ::ntt::Type* release_type();
  ::ntt::Type* mutable_type();
  void set_allocated_type(::ntt::Type* type);
  private:
  const ::ntt::Type& _internal_type() const;
  ::ntt::Type* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:ntt.DecodeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ntt::BinaryString* bytes_;
  ::ntt::Type* type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_codec_2eproto;
};
// -------------------------------------------------------------------

class DecodeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ntt.DecodeResponse) */ {
 public:
  DecodeResponse();
  virtual ~DecodeResponse();

  DecodeResponse(const DecodeResponse& from);
  DecodeResponse(DecodeResponse&& from) noexcept
    : DecodeResponse() {
    *this = ::std::move(from);
  }

  inline DecodeResponse& operator=(const DecodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecodeResponse& operator=(DecodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecodeResponse* internal_default_instance() {
    return reinterpret_cast<const DecodeResponse*>(
               &_DecodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DecodeResponse& a, DecodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DecodeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecodeResponse* New() const final {
    return CreateMaybeMessage<DecodeResponse>(nullptr);
  }

  DecodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecodeResponse& from);
  void MergeFrom(const DecodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ntt.DecodeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_codec_2eproto);
    return ::descriptor_table_codec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kNbitsFieldNumber = 1,
  };
  // .ntt.Value value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::ntt::Value& value() const;
  ::ntt::Value* release_value();
  ::ntt::Value* mutable_value();
  void set_allocated_value(::ntt::Value* value);
  private:
  const ::ntt::Value& _internal_value() const;
  ::ntt::Value* _internal_mutable_value();
  public:

  // int32 nbits = 1;
  void clear_nbits();
  ::PROTOBUF_NAMESPACE_ID::int32 nbits() const;
  void set_nbits(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nbits() const;
  void _internal_set_nbits(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ntt.DecodeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ntt::Value* value_;
  ::PROTOBUF_NAMESPACE_ID::int32 nbits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_codec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DecodeRequest

// .ntt.BinaryString bytes = 1;
inline bool DecodeRequest::_internal_has_bytes() const {
  return this != internal_default_instance() && bytes_ != nullptr;
}
inline bool DecodeRequest::has_bytes() const {
  return _internal_has_bytes();
}
inline const ::ntt::BinaryString& DecodeRequest::_internal_bytes() const {
  const ::ntt::BinaryString* p = bytes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ntt::BinaryString*>(
      &::ntt::_BinaryString_default_instance_);
}
inline const ::ntt::BinaryString& DecodeRequest::bytes() const {
  // @@protoc_insertion_point(field_get:ntt.DecodeRequest.bytes)
  return _internal_bytes();
}
inline ::ntt::BinaryString* DecodeRequest::release_bytes() {
  // @@protoc_insertion_point(field_release:ntt.DecodeRequest.bytes)
  
  ::ntt::BinaryString* temp = bytes_;
  bytes_ = nullptr;
  return temp;
}
inline ::ntt::BinaryString* DecodeRequest::_internal_mutable_bytes() {
  
  if (bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::ntt::BinaryString>(GetArenaNoVirtual());
    bytes_ = p;
  }
  return bytes_;
}
inline ::ntt::BinaryString* DecodeRequest::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable:ntt.DecodeRequest.bytes)
  return _internal_mutable_bytes();
}
inline void DecodeRequest::set_allocated_bytes(::ntt::BinaryString* bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bytes_);
  }
  if (bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bytes, submessage_arena);
    }
    
  } else {
    
  }
  bytes_ = bytes;
  // @@protoc_insertion_point(field_set_allocated:ntt.DecodeRequest.bytes)
}

// .ntt.Type type = 2;
inline bool DecodeRequest::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool DecodeRequest::has_type() const {
  return _internal_has_type();
}
inline const ::ntt::Type& DecodeRequest::_internal_type() const {
  const ::ntt::Type* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ntt::Type*>(
      &::ntt::_Type_default_instance_);
}
inline const ::ntt::Type& DecodeRequest::type() const {
  // @@protoc_insertion_point(field_get:ntt.DecodeRequest.type)
  return _internal_type();
}
inline ::ntt::Type* DecodeRequest::release_type() {
  // @@protoc_insertion_point(field_release:ntt.DecodeRequest.type)
  
  ::ntt::Type* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::ntt::Type* DecodeRequest::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::ntt::Type>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::ntt::Type* DecodeRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ntt.DecodeRequest.type)
  return _internal_mutable_type();
}
inline void DecodeRequest::set_allocated_type(::ntt::Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:ntt.DecodeRequest.type)
}

// -------------------------------------------------------------------

// DecodeResponse

// int32 nbits = 1;
inline void DecodeResponse::clear_nbits() {
  nbits_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecodeResponse::_internal_nbits() const {
  return nbits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecodeResponse::nbits() const {
  // @@protoc_insertion_point(field_get:ntt.DecodeResponse.nbits)
  return _internal_nbits();
}
inline void DecodeResponse::_internal_set_nbits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nbits_ = value;
}
inline void DecodeResponse::set_nbits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nbits(value);
  // @@protoc_insertion_point(field_set:ntt.DecodeResponse.nbits)
}

// .ntt.Value value = 2;
inline bool DecodeResponse::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool DecodeResponse::has_value() const {
  return _internal_has_value();
}
inline const ::ntt::Value& DecodeResponse::_internal_value() const {
  const ::ntt::Value* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ntt::Value*>(
      &::ntt::_Value_default_instance_);
}
inline const ::ntt::Value& DecodeResponse::value() const {
  // @@protoc_insertion_point(field_get:ntt.DecodeResponse.value)
  return _internal_value();
}
inline ::ntt::Value* DecodeResponse::release_value() {
  // @@protoc_insertion_point(field_release:ntt.DecodeResponse.value)
  
  ::ntt::Value* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::ntt::Value* DecodeResponse::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::ntt::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::ntt::Value* DecodeResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ntt.DecodeResponse.value)
  return _internal_mutable_value();
}
inline void DecodeResponse::set_allocated_value(::ntt::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:ntt.DecodeResponse.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ntt

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_codec_2eproto
