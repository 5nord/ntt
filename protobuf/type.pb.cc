// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type.proto

#include "type.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_type_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComponentType_type_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_type_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Constraint_type_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_type_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnumType_type_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_type_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Field_type_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_type_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortType_type_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_type_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringType_type_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_type_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimerType_type_2eproto;
namespace ntt {
class TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type> _instance;
  const ::ntt::ListType* array_;
  const ::ntt::ListType* record_of_;
  const ::ntt::ListType* set_of_;
  const ::ntt::StringType* bitstring_;
  const ::ntt::StringType* charstring_;
  const ::ntt::StringType* hextstring_;
  const ::ntt::StringType* octetstring_;
  const ::ntt::StringType* universal_charstring_;
  const ::ntt::StructType* anytype_;
  const ::ntt::StructType* record_;
  const ::ntt::StructType* set_;
  const ::ntt::StructType* union__;
  int scalar_;
  const ::ntt::ComponentType* component_;
  const ::ntt::EnumType* enumerated_;
  const ::ntt::PortType* port_;
  const ::ntt::TimerType* timer_;
  const ::ntt::Type* address_;
} _Type_default_instance_;
class FieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Field> _instance;
} _Field_default_instance_;
class StructTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StructType> _instance;
} _StructType_default_instance_;
class ListTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListType> _instance;
} _ListType_default_instance_;
class StringTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringType> _instance;
} _StringType_default_instance_;
class Constraint_BoundsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Constraint_Bounds> _instance;
} _Constraint_Bounds_default_instance_;
class ConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Constraint> _instance;
} _Constraint_default_instance_;
class ComponentTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComponentType> _instance;
} _ComponentType_default_instance_;
class EnumTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnumType> _instance;
} _EnumType_default_instance_;
class PortTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PortType> _instance;
} _PortType_default_instance_;
class TimerTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimerType> _instance;
} _TimerType_default_instance_;
}  // namespace ntt
static void InitDefaultsscc_info_ComponentType_type_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ntt::_ComponentType_default_instance_;
    new (ptr) ::ntt::ComponentType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ntt::ComponentType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComponentType_type_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ComponentType_type_2eproto}, {}};

static void InitDefaultsscc_info_Constraint_type_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ntt::_Constraint_default_instance_;
    new (ptr) ::ntt::Constraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ntt::Constraint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Constraint_type_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Constraint_type_2eproto}, {}};

static void InitDefaultsscc_info_Constraint_Bounds_type_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ntt::_Constraint_Bounds_default_instance_;
    new (ptr) ::ntt::Constraint_Bounds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ntt::Constraint_Bounds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Constraint_Bounds_type_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Constraint_Bounds_type_2eproto}, {}};

static void InitDefaultsscc_info_EnumType_type_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ntt::_EnumType_default_instance_;
    new (ptr) ::ntt::EnumType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ntt::EnumType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnumType_type_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnumType_type_2eproto}, {}};

static void InitDefaultsscc_info_Field_type_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ntt::_Type_default_instance_;
    new (ptr) ::ntt::Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::ntt::_Field_default_instance_;
    new (ptr) ::ntt::Field();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::ntt::_StructType_default_instance_;
    new (ptr) ::ntt::StructType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::ntt::_ListType_default_instance_;
    new (ptr) ::ntt::ListType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ntt::Type::InitAsDefaultInstance();
  ::ntt::Field::InitAsDefaultInstance();
  ::ntt::StructType::InitAsDefaultInstance();
  ::ntt::ListType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Field_type_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Field_type_2eproto}, {
      &scc_info_Constraint_type_2eproto.base,
      &scc_info_StringType_type_2eproto.base,
      &scc_info_ComponentType_type_2eproto.base,
      &scc_info_EnumType_type_2eproto.base,
      &scc_info_PortType_type_2eproto.base,
      &scc_info_TimerType_type_2eproto.base,}};

static void InitDefaultsscc_info_PortType_type_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ntt::_PortType_default_instance_;
    new (ptr) ::ntt::PortType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ntt::PortType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortType_type_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PortType_type_2eproto}, {}};

static void InitDefaultsscc_info_StringType_type_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ntt::_StringType_default_instance_;
    new (ptr) ::ntt::StringType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ntt::StringType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringType_type_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StringType_type_2eproto}, {}};

static void InitDefaultsscc_info_TimerType_type_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ntt::_TimerType_default_instance_;
    new (ptr) ::ntt::TimerType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ntt::TimerType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimerType_type_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimerType_type_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_type_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_type_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_type_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_type_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::Type, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ntt::Type, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ntt::Type, name_),
  PROTOBUF_FIELD_OFFSET(::ntt::Type, encode_),
  PROTOBUF_FIELD_OFFSET(::ntt::Type, variant_),
  PROTOBUF_FIELD_OFFSET(::ntt::Type, extension_),
  offsetof(::ntt::TypeDefaultTypeInternal, array_),
  offsetof(::ntt::TypeDefaultTypeInternal, record_of_),
  offsetof(::ntt::TypeDefaultTypeInternal, set_of_),
  offsetof(::ntt::TypeDefaultTypeInternal, bitstring_),
  offsetof(::ntt::TypeDefaultTypeInternal, charstring_),
  offsetof(::ntt::TypeDefaultTypeInternal, hextstring_),
  offsetof(::ntt::TypeDefaultTypeInternal, octetstring_),
  offsetof(::ntt::TypeDefaultTypeInternal, universal_charstring_),
  offsetof(::ntt::TypeDefaultTypeInternal, anytype_),
  offsetof(::ntt::TypeDefaultTypeInternal, record_),
  offsetof(::ntt::TypeDefaultTypeInternal, set_),
  offsetof(::ntt::TypeDefaultTypeInternal, union__),
  offsetof(::ntt::TypeDefaultTypeInternal, scalar_),
  offsetof(::ntt::TypeDefaultTypeInternal, component_),
  offsetof(::ntt::TypeDefaultTypeInternal, enumerated_),
  offsetof(::ntt::TypeDefaultTypeInternal, port_),
  offsetof(::ntt::TypeDefaultTypeInternal, timer_),
  offsetof(::ntt::TypeDefaultTypeInternal, address_),
  PROTOBUF_FIELD_OFFSET(::ntt::Type, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ntt::Field, name_),
  PROTOBUF_FIELD_OFFSET(::ntt::Field, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::StructType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ntt::StructType, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::ListType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ntt::ListType, element_),
  PROTOBUF_FIELD_OFFSET(::ntt::ListType, constraint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::StringType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ntt::StringType, element_width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::Constraint_Bounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ntt::Constraint_Bounds, start_),
  PROTOBUF_FIELD_OFFSET(::ntt::Constraint_Bounds, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::Constraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::ComponentType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::EnumType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::PortType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ntt::TimerType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ntt::Type)},
  { 28, -1, sizeof(::ntt::Field)},
  { 35, -1, sizeof(::ntt::StructType)},
  { 41, -1, sizeof(::ntt::ListType)},
  { 48, -1, sizeof(::ntt::StringType)},
  { 54, -1, sizeof(::ntt::Constraint_Bounds)},
  { 61, -1, sizeof(::ntt::Constraint)},
  { 66, -1, sizeof(::ntt::ComponentType)},
  { 71, -1, sizeof(::ntt::EnumType)},
  { 76, -1, sizeof(::ntt::PortType)},
  { 81, -1, sizeof(::ntt::TimerType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_Field_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_StructType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_ListType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_StringType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_Constraint_Bounds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_Constraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_ComponentType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_EnumType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_PortType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntt::_TimerType_default_instance_),
};

const char descriptor_table_protodef_type_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntype.proto\022\003ntt\"\332\005\n\004Type\022\014\n\004name\030\001 \001(\t"
  "\022\016\n\006encode\030\003 \001(\t\022\017\n\007variant\030\004 \001(\t\022\021\n\text"
  "ension\030\005 \001(\t\022\036\n\005array\030\t \001(\0132\r.ntt.ListTy"
  "peH\000\022\"\n\trecord_of\030\n \001(\0132\r.ntt.ListTypeH\000"
  "\022\037\n\006set_of\030\013 \001(\0132\r.ntt.ListTypeH\000\022$\n\tbit"
  "string\030\014 \001(\0132\017.ntt.StringTypeH\000\022%\n\nchars"
  "tring\030\r \001(\0132\017.ntt.StringTypeH\000\022%\n\nhextst"
  "ring\030\016 \001(\0132\017.ntt.StringTypeH\000\022&\n\013octetst"
  "ring\030\017 \001(\0132\017.ntt.StringTypeH\000\022/\n\024univers"
  "al_charstring\030\020 \001(\0132\017.ntt.StringTypeH\000\022\""
  "\n\007anytype\030\021 \001(\0132\017.ntt.StructTypeH\000\022!\n\006re"
  "cord\030\022 \001(\0132\017.ntt.StructTypeH\000\022\036\n\003set\030\023 \001"
  "(\0132\017.ntt.StructTypeH\000\022 \n\005union\030\024 \001(\0132\017.n"
  "tt.StructTypeH\000\022!\n\006scalar\030\025 \001(\0162\017.ntt.Sc"
  "alarTypeH\000\022\'\n\tcomponent\030\026 \001(\0132\022.ntt.Comp"
  "onentTypeH\000\022#\n\nenumerated\030\027 \001(\0132\r.ntt.En"
  "umTypeH\000\022\035\n\004port\030\030 \001(\0132\r.ntt.PortTypeH\000\022"
  "\037\n\005timer\030\031 \001(\0132\016.ntt.TimerTypeH\000\022\034\n\007addr"
  "ess\030\032 \001(\0132\t.ntt.TypeH\000B\006\n\004kind\".\n\005Field\022"
  "\014\n\004name\030\001 \001(\t\022\027\n\004type\030\002 \001(\0132\t.ntt.Type\"("
  "\n\nStructType\022\032\n\006fields\030\001 \003(\0132\n.ntt.Field"
  "\"K\n\010ListType\022\032\n\007element\030\001 \001(\0132\t.ntt.Type"
  "\022#\n\nconstraint\030\003 \001(\0132\017.ntt.Constraint\"#\n"
  "\nStringType\022\025\n\relement_width\030\001 \001(\005\"2\n\nCo"
  "nstraint\032$\n\006Bounds\022\r\n\005start\030\001 \001(\003\022\013\n\003end"
  "\030\002 \001(\003\"\017\n\rComponentType\"\n\n\010EnumType\"\n\n\010P"
  "ortType\"\013\n\tTimerType*H\n\nScalarType\022\010\n\004NU"
  "LL\020\000\022\013\n\007BOOLEAN\020\001\022\t\n\005FLOAT\020\002\022\013\n\007INTEGER\020"
  "\003\022\013\n\007VERDICT\020\004B\037Z\035github.com/nokia/ntt/p"
  "rotobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_type_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_type_2eproto_sccs[8] = {
  &scc_info_ComponentType_type_2eproto.base,
  &scc_info_Constraint_type_2eproto.base,
  &scc_info_Constraint_Bounds_type_2eproto.base,
  &scc_info_EnumType_type_2eproto.base,
  &scc_info_Field_type_2eproto.base,
  &scc_info_PortType_type_2eproto.base,
  &scc_info_StringType_type_2eproto.base,
  &scc_info_TimerType_type_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_type_2eproto_once;
static bool descriptor_table_type_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_type_2eproto = {
  &descriptor_table_type_2eproto_initialized, descriptor_table_protodef_type_2eproto, "type.proto", 1175,
  &descriptor_table_type_2eproto_once, descriptor_table_type_2eproto_sccs, descriptor_table_type_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_type_2eproto::offsets,
  file_level_metadata_type_2eproto, 11, file_level_enum_descriptors_type_2eproto, file_level_service_descriptors_type_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_type_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_type_2eproto), true);
namespace ntt {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScalarType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_type_2eproto);
  return file_level_enum_descriptors_type_2eproto[0];
}
bool ScalarType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Type::InitAsDefaultInstance() {
  ::ntt::_Type_default_instance_.array_ = const_cast< ::ntt::ListType*>(
      ::ntt::ListType::internal_default_instance());
  ::ntt::_Type_default_instance_.record_of_ = const_cast< ::ntt::ListType*>(
      ::ntt::ListType::internal_default_instance());
  ::ntt::_Type_default_instance_.set_of_ = const_cast< ::ntt::ListType*>(
      ::ntt::ListType::internal_default_instance());
  ::ntt::_Type_default_instance_.bitstring_ = const_cast< ::ntt::StringType*>(
      ::ntt::StringType::internal_default_instance());
  ::ntt::_Type_default_instance_.charstring_ = const_cast< ::ntt::StringType*>(
      ::ntt::StringType::internal_default_instance());
  ::ntt::_Type_default_instance_.hextstring_ = const_cast< ::ntt::StringType*>(
      ::ntt::StringType::internal_default_instance());
  ::ntt::_Type_default_instance_.octetstring_ = const_cast< ::ntt::StringType*>(
      ::ntt::StringType::internal_default_instance());
  ::ntt::_Type_default_instance_.universal_charstring_ = const_cast< ::ntt::StringType*>(
      ::ntt::StringType::internal_default_instance());
  ::ntt::_Type_default_instance_.anytype_ = const_cast< ::ntt::StructType*>(
      ::ntt::StructType::internal_default_instance());
  ::ntt::_Type_default_instance_.record_ = const_cast< ::ntt::StructType*>(
      ::ntt::StructType::internal_default_instance());
  ::ntt::_Type_default_instance_.set_ = const_cast< ::ntt::StructType*>(
      ::ntt::StructType::internal_default_instance());
  ::ntt::_Type_default_instance_.union__ = const_cast< ::ntt::StructType*>(
      ::ntt::StructType::internal_default_instance());
  ::ntt::_Type_default_instance_.scalar_ = 0;
  ::ntt::_Type_default_instance_.component_ = const_cast< ::ntt::ComponentType*>(
      ::ntt::ComponentType::internal_default_instance());
  ::ntt::_Type_default_instance_.enumerated_ = const_cast< ::ntt::EnumType*>(
      ::ntt::EnumType::internal_default_instance());
  ::ntt::_Type_default_instance_.port_ = const_cast< ::ntt::PortType*>(
      ::ntt::PortType::internal_default_instance());
  ::ntt::_Type_default_instance_.timer_ = const_cast< ::ntt::TimerType*>(
      ::ntt::TimerType::internal_default_instance());
  ::ntt::_Type_default_instance_.address_ = const_cast< ::ntt::Type*>(
      ::ntt::Type::internal_default_instance());
}
class Type::_Internal {
 public:
  static const ::ntt::ListType& array(const Type* msg);
  static const ::ntt::ListType& record_of(const Type* msg);
  static const ::ntt::ListType& set_of(const Type* msg);
  static const ::ntt::StringType& bitstring(const Type* msg);
  static const ::ntt::StringType& charstring(const Type* msg);
  static const ::ntt::StringType& hextstring(const Type* msg);
  static const ::ntt::StringType& octetstring(const Type* msg);
  static const ::ntt::StringType& universal_charstring(const Type* msg);
  static const ::ntt::StructType& anytype(const Type* msg);
  static const ::ntt::StructType& record(const Type* msg);
  static const ::ntt::StructType& set(const Type* msg);
  static const ::ntt::StructType& union_(const Type* msg);
  static const ::ntt::ComponentType& component(const Type* msg);
  static const ::ntt::EnumType& enumerated(const Type* msg);
  static const ::ntt::PortType& port(const Type* msg);
  static const ::ntt::TimerType& timer(const Type* msg);
  static const ::ntt::Type& address(const Type* msg);
};

const ::ntt::ListType&
Type::_Internal::array(const Type* msg) {
  return *msg->kind_.array_;
}
const ::ntt::ListType&
Type::_Internal::record_of(const Type* msg) {
  return *msg->kind_.record_of_;
}
const ::ntt::ListType&
Type::_Internal::set_of(const Type* msg) {
  return *msg->kind_.set_of_;
}
const ::ntt::StringType&
Type::_Internal::bitstring(const Type* msg) {
  return *msg->kind_.bitstring_;
}
const ::ntt::StringType&
Type::_Internal::charstring(const Type* msg) {
  return *msg->kind_.charstring_;
}
const ::ntt::StringType&
Type::_Internal::hextstring(const Type* msg) {
  return *msg->kind_.hextstring_;
}
const ::ntt::StringType&
Type::_Internal::octetstring(const Type* msg) {
  return *msg->kind_.octetstring_;
}
const ::ntt::StringType&
Type::_Internal::universal_charstring(const Type* msg) {
  return *msg->kind_.universal_charstring_;
}
const ::ntt::StructType&
Type::_Internal::anytype(const Type* msg) {
  return *msg->kind_.anytype_;
}
const ::ntt::StructType&
Type::_Internal::record(const Type* msg) {
  return *msg->kind_.record_;
}
const ::ntt::StructType&
Type::_Internal::set(const Type* msg) {
  return *msg->kind_.set_;
}
const ::ntt::StructType&
Type::_Internal::union_(const Type* msg) {
  return *msg->kind_.union__;
}
const ::ntt::ComponentType&
Type::_Internal::component(const Type* msg) {
  return *msg->kind_.component_;
}
const ::ntt::EnumType&
Type::_Internal::enumerated(const Type* msg) {
  return *msg->kind_.enumerated_;
}
const ::ntt::PortType&
Type::_Internal::port(const Type* msg) {
  return *msg->kind_.port_;
}
const ::ntt::TimerType&
Type::_Internal::timer(const Type* msg) {
  return *msg->kind_.timer_;
}
const ::ntt::Type&
Type::_Internal::address(const Type* msg) {
  return *msg->kind_.address_;
}
void Type::set_allocated_array(::ntt::ListType* array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array, submessage_arena);
    }
    set_has_array();
    kind_.array_ = array;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.array)
}
void Type::set_allocated_record_of(::ntt::ListType* record_of) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (record_of) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      record_of = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_of, submessage_arena);
    }
    set_has_record_of();
    kind_.record_of_ = record_of;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.record_of)
}
void Type::set_allocated_set_of(::ntt::ListType* set_of) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (set_of) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      set_of = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_of, submessage_arena);
    }
    set_has_set_of();
    kind_.set_of_ = set_of;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.set_of)
}
void Type::set_allocated_bitstring(::ntt::StringType* bitstring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (bitstring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bitstring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitstring, submessage_arena);
    }
    set_has_bitstring();
    kind_.bitstring_ = bitstring;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.bitstring)
}
void Type::set_allocated_charstring(::ntt::StringType* charstring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (charstring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      charstring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charstring, submessage_arena);
    }
    set_has_charstring();
    kind_.charstring_ = charstring;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.charstring)
}
void Type::set_allocated_hextstring(::ntt::StringType* hextstring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (hextstring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hextstring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hextstring, submessage_arena);
    }
    set_has_hextstring();
    kind_.hextstring_ = hextstring;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.hextstring)
}
void Type::set_allocated_octetstring(::ntt::StringType* octetstring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (octetstring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      octetstring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, octetstring, submessage_arena);
    }
    set_has_octetstring();
    kind_.octetstring_ = octetstring;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.octetstring)
}
void Type::set_allocated_universal_charstring(::ntt::StringType* universal_charstring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (universal_charstring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      universal_charstring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, universal_charstring, submessage_arena);
    }
    set_has_universal_charstring();
    kind_.universal_charstring_ = universal_charstring;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.universal_charstring)
}
void Type::set_allocated_anytype(::ntt::StructType* anytype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (anytype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      anytype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anytype, submessage_arena);
    }
    set_has_anytype();
    kind_.anytype_ = anytype;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.anytype)
}
void Type::set_allocated_record(::ntt::StructType* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    set_has_record();
    kind_.record_ = record;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.record)
}
void Type::set_allocated_set(::ntt::StructType* set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set, submessage_arena);
    }
    set_has_set();
    kind_.set_ = set;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.set)
}
void Type::set_allocated_union_(::ntt::StructType* union_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (union_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      union_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, union_, submessage_arena);
    }
    set_has_union_();
    kind_.union__ = union_;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.union)
}
void Type::set_allocated_component(::ntt::ComponentType* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    set_has_component();
    kind_.component_ = component;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.component)
}
void Type::set_allocated_enumerated(::ntt::EnumType* enumerated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (enumerated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enumerated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enumerated, submessage_arena);
    }
    set_has_enumerated();
    kind_.enumerated_ = enumerated;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.enumerated)
}
void Type::set_allocated_port(::ntt::PortType* port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port, submessage_arena);
    }
    set_has_port();
    kind_.port_ = port;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.port)
}
void Type::set_allocated_timer(::ntt::TimerType* timer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (timer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timer, submessage_arena);
    }
    set_has_timer();
    kind_.timer_ = timer;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.timer)
}
void Type::set_allocated_address(::ntt::Type* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    set_has_address();
    kind_.address_ = address;
  }
  // @@protoc_insertion_point(field_set_allocated:ntt.Type.address)
}
Type::Type()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.Type)
}
Type::Type(const Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  encode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encode().empty()) {
    encode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encode_);
  }
  variant_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_variant().empty()) {
    variant_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.variant_);
  }
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extension().empty()) {
    extension_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  clear_has_kind();
  switch (from.kind_case()) {
    case kArray: {
      _internal_mutable_array()->::ntt::ListType::MergeFrom(from._internal_array());
      break;
    }
    case kRecordOf: {
      _internal_mutable_record_of()->::ntt::ListType::MergeFrom(from._internal_record_of());
      break;
    }
    case kSetOf: {
      _internal_mutable_set_of()->::ntt::ListType::MergeFrom(from._internal_set_of());
      break;
    }
    case kBitstring: {
      _internal_mutable_bitstring()->::ntt::StringType::MergeFrom(from._internal_bitstring());
      break;
    }
    case kCharstring: {
      _internal_mutable_charstring()->::ntt::StringType::MergeFrom(from._internal_charstring());
      break;
    }
    case kHextstring: {
      _internal_mutable_hextstring()->::ntt::StringType::MergeFrom(from._internal_hextstring());
      break;
    }
    case kOctetstring: {
      _internal_mutable_octetstring()->::ntt::StringType::MergeFrom(from._internal_octetstring());
      break;
    }
    case kUniversalCharstring: {
      _internal_mutable_universal_charstring()->::ntt::StringType::MergeFrom(from._internal_universal_charstring());
      break;
    }
    case kAnytype: {
      _internal_mutable_anytype()->::ntt::StructType::MergeFrom(from._internal_anytype());
      break;
    }
    case kRecord: {
      _internal_mutable_record()->::ntt::StructType::MergeFrom(from._internal_record());
      break;
    }
    case kSet: {
      _internal_mutable_set()->::ntt::StructType::MergeFrom(from._internal_set());
      break;
    }
    case kUnion: {
      _internal_mutable_union_()->::ntt::StructType::MergeFrom(from._internal_union_());
      break;
    }
    case kScalar: {
      _internal_set_scalar(from._internal_scalar());
      break;
    }
    case kComponent: {
      _internal_mutable_component()->::ntt::ComponentType::MergeFrom(from._internal_component());
      break;
    }
    case kEnumerated: {
      _internal_mutable_enumerated()->::ntt::EnumType::MergeFrom(from._internal_enumerated());
      break;
    }
    case kPort: {
      _internal_mutable_port()->::ntt::PortType::MergeFrom(from._internal_port());
      break;
    }
    case kTimer: {
      _internal_mutable_timer()->::ntt::TimerType::MergeFrom(from._internal_timer());
      break;
    }
    case kAddress: {
      _internal_mutable_address()->::ntt::Type::MergeFrom(from._internal_address());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ntt.Type)
}

void Type::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Field_type_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variant_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_kind();
}

Type::~Type() {
  // @@protoc_insertion_point(destructor:ntt.Type)
  SharedDtor();
}

void Type::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variant_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_kind()) {
    clear_kind();
  }
}

void Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type& Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Field_type_2eproto.base);
  return *internal_default_instance();
}


void Type::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:ntt.Type)
  switch (kind_case()) {
    case kArray: {
      delete kind_.array_;
      break;
    }
    case kRecordOf: {
      delete kind_.record_of_;
      break;
    }
    case kSetOf: {
      delete kind_.set_of_;
      break;
    }
    case kBitstring: {
      delete kind_.bitstring_;
      break;
    }
    case kCharstring: {
      delete kind_.charstring_;
      break;
    }
    case kHextstring: {
      delete kind_.hextstring_;
      break;
    }
    case kOctetstring: {
      delete kind_.octetstring_;
      break;
    }
    case kUniversalCharstring: {
      delete kind_.universal_charstring_;
      break;
    }
    case kAnytype: {
      delete kind_.anytype_;
      break;
    }
    case kRecord: {
      delete kind_.record_;
      break;
    }
    case kSet: {
      delete kind_.set_;
      break;
    }
    case kUnion: {
      delete kind_.union__;
      break;
    }
    case kScalar: {
      // No need to clear
      break;
    }
    case kComponent: {
      delete kind_.component_;
      break;
    }
    case kEnumerated: {
      delete kind_.enumerated_;
      break;
    }
    case kPort: {
      delete kind_.port_;
      break;
    }
    case kTimer: {
      delete kind_.timer_;
      break;
    }
    case kAddress: {
      delete kind_.address_;
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void Type::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variant_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_kind();
  _internal_metadata_.Clear();
}

const char* Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ntt.Type.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ntt.Type.encode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string variant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_variant();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ntt.Type.variant"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string extension = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_extension();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ntt.Type.extension"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.ListType array = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.ListType record_of = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_record_of(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.ListType set_of = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_of(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.StringType bitstring = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitstring(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.StringType charstring = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_charstring(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.StringType hextstring = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_hextstring(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.StringType octetstring = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_octetstring(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.StringType universal_charstring = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_universal_charstring(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.StructType anytype = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_anytype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.StructType record = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.StructType set = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.StructType union = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_union_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.ScalarType scalar = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_scalar(static_cast<::ntt::ScalarType>(val));
        } else goto handle_unusual;
        continue;
      // .ntt.ComponentType component = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.EnumType enumerated = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_enumerated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.PortType port = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_port(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.TimerType timer = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_timer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.Type address = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ntt.Type.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string encode = 3;
  if (this->encode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encode().data(), static_cast<int>(this->_internal_encode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ntt.Type.encode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encode(), target);
  }

  // string variant = 4;
  if (this->variant().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_variant().data(), static_cast<int>(this->_internal_variant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ntt.Type.variant");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_variant(), target);
  }

  // string extension = 5;
  if (this->extension().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extension().data(), static_cast<int>(this->_internal_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ntt.Type.extension");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_extension(), target);
  }

  // .ntt.ListType array = 9;
  if (_internal_has_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::array(this), target, stream);
  }

  // .ntt.ListType record_of = 10;
  if (_internal_has_record_of()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::record_of(this), target, stream);
  }

  // .ntt.ListType set_of = 11;
  if (_internal_has_set_of()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::set_of(this), target, stream);
  }

  // .ntt.StringType bitstring = 12;
  if (_internal_has_bitstring()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::bitstring(this), target, stream);
  }

  // .ntt.StringType charstring = 13;
  if (_internal_has_charstring()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::charstring(this), target, stream);
  }

  // .ntt.StringType hextstring = 14;
  if (_internal_has_hextstring()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::hextstring(this), target, stream);
  }

  // .ntt.StringType octetstring = 15;
  if (_internal_has_octetstring()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::octetstring(this), target, stream);
  }

  // .ntt.StringType universal_charstring = 16;
  if (_internal_has_universal_charstring()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::universal_charstring(this), target, stream);
  }

  // .ntt.StructType anytype = 17;
  if (_internal_has_anytype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::anytype(this), target, stream);
  }

  // .ntt.StructType record = 18;
  if (_internal_has_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::record(this), target, stream);
  }

  // .ntt.StructType set = 19;
  if (_internal_has_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::set(this), target, stream);
  }

  // .ntt.StructType union = 20;
  if (_internal_has_union_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::union_(this), target, stream);
  }

  // .ntt.ScalarType scalar = 21;
  if (_internal_has_scalar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_scalar(), target);
  }

  // .ntt.ComponentType component = 22;
  if (_internal_has_component()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::component(this), target, stream);
  }

  // .ntt.EnumType enumerated = 23;
  if (_internal_has_enumerated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::enumerated(this), target, stream);
  }

  // .ntt.PortType port = 24;
  if (_internal_has_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::port(this), target, stream);
  }

  // .ntt.TimerType timer = 25;
  if (_internal_has_timer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::timer(this), target, stream);
  }

  // .ntt.Type address = 26;
  if (_internal_has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.Type)
  return target;
}

size_t Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string encode = 3;
  if (this->encode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encode());
  }

  // string variant = 4;
  if (this->variant().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_variant());
  }

  // string extension = 5;
  if (this->extension().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extension());
  }

  switch (kind_case()) {
    // .ntt.ListType array = 9;
    case kArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.array_);
      break;
    }
    // .ntt.ListType record_of = 10;
    case kRecordOf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.record_of_);
      break;
    }
    // .ntt.ListType set_of = 11;
    case kSetOf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.set_of_);
      break;
    }
    // .ntt.StringType bitstring = 12;
    case kBitstring: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.bitstring_);
      break;
    }
    // .ntt.StringType charstring = 13;
    case kCharstring: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.charstring_);
      break;
    }
    // .ntt.StringType hextstring = 14;
    case kHextstring: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.hextstring_);
      break;
    }
    // .ntt.StringType octetstring = 15;
    case kOctetstring: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.octetstring_);
      break;
    }
    // .ntt.StringType universal_charstring = 16;
    case kUniversalCharstring: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.universal_charstring_);
      break;
    }
    // .ntt.StructType anytype = 17;
    case kAnytype: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.anytype_);
      break;
    }
    // .ntt.StructType record = 18;
    case kRecord: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.record_);
      break;
    }
    // .ntt.StructType set = 19;
    case kSet: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.set_);
      break;
    }
    // .ntt.StructType union = 20;
    case kUnion: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.union__);
      break;
    }
    // .ntt.ScalarType scalar = 21;
    case kScalar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scalar());
      break;
    }
    // .ntt.ComponentType component = 22;
    case kComponent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.component_);
      break;
    }
    // .ntt.EnumType enumerated = 23;
    case kEnumerated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.enumerated_);
      break;
    }
    // .ntt.PortType port = 24;
    case kPort: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.port_);
      break;
    }
    // .ntt.TimerType timer = 25;
    case kTimer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.timer_);
      break;
    }
    // .ntt.Type address = 26;
    case kAddress: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.address_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.Type)
  GOOGLE_DCHECK_NE(&from, this);
  const Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.Type)
    MergeFrom(*source);
  }
}

void Type::MergeFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.encode().size() > 0) {

    encode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encode_);
  }
  if (from.variant().size() > 0) {

    variant_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.variant_);
  }
  if (from.extension().size() > 0) {

    extension_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  switch (from.kind_case()) {
    case kArray: {
      _internal_mutable_array()->::ntt::ListType::MergeFrom(from._internal_array());
      break;
    }
    case kRecordOf: {
      _internal_mutable_record_of()->::ntt::ListType::MergeFrom(from._internal_record_of());
      break;
    }
    case kSetOf: {
      _internal_mutable_set_of()->::ntt::ListType::MergeFrom(from._internal_set_of());
      break;
    }
    case kBitstring: {
      _internal_mutable_bitstring()->::ntt::StringType::MergeFrom(from._internal_bitstring());
      break;
    }
    case kCharstring: {
      _internal_mutable_charstring()->::ntt::StringType::MergeFrom(from._internal_charstring());
      break;
    }
    case kHextstring: {
      _internal_mutable_hextstring()->::ntt::StringType::MergeFrom(from._internal_hextstring());
      break;
    }
    case kOctetstring: {
      _internal_mutable_octetstring()->::ntt::StringType::MergeFrom(from._internal_octetstring());
      break;
    }
    case kUniversalCharstring: {
      _internal_mutable_universal_charstring()->::ntt::StringType::MergeFrom(from._internal_universal_charstring());
      break;
    }
    case kAnytype: {
      _internal_mutable_anytype()->::ntt::StructType::MergeFrom(from._internal_anytype());
      break;
    }
    case kRecord: {
      _internal_mutable_record()->::ntt::StructType::MergeFrom(from._internal_record());
      break;
    }
    case kSet: {
      _internal_mutable_set()->::ntt::StructType::MergeFrom(from._internal_set());
      break;
    }
    case kUnion: {
      _internal_mutable_union_()->::ntt::StructType::MergeFrom(from._internal_union_());
      break;
    }
    case kScalar: {
      _internal_set_scalar(from._internal_scalar());
      break;
    }
    case kComponent: {
      _internal_mutable_component()->::ntt::ComponentType::MergeFrom(from._internal_component());
      break;
    }
    case kEnumerated: {
      _internal_mutable_enumerated()->::ntt::EnumType::MergeFrom(from._internal_enumerated());
      break;
    }
    case kPort: {
      _internal_mutable_port()->::ntt::PortType::MergeFrom(from._internal_port());
      break;
    }
    case kTimer: {
      _internal_mutable_timer()->::ntt::TimerType::MergeFrom(from._internal_timer());
      break;
    }
    case kAddress: {
      _internal_mutable_address()->::ntt::Type::MergeFrom(from._internal_address());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type::CopyFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {
  return true;
}

void Type::InternalSwap(Type* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encode_.Swap(&other->encode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  variant_.Swap(&other->variant_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extension_.Swap(&other->extension_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Field::InitAsDefaultInstance() {
  ::ntt::_Field_default_instance_._instance.get_mutable()->type_ = const_cast< ::ntt::Type*>(
      ::ntt::Type::internal_default_instance());
}
class Field::_Internal {
 public:
  static const ::ntt::Type& type(const Field* msg);
};

const ::ntt::Type&
Field::_Internal::type(const Field* msg) {
  return *msg->type_;
}
Field::Field()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.Field)
}
Field::Field(const Field& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_type()) {
    type_ = new ::ntt::Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ntt.Field)
}

void Field::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Field_type_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = nullptr;
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:ntt.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Field& Field::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Field_type_2eproto.base);
  return *internal_default_instance();
}


void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ntt.Field.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Field::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ntt.Field.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .ntt.Type type = 2;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.Field)
  return target;
}

size_t Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.Field)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ntt.Type type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Field::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.Field)
  GOOGLE_DCHECK_NE(&from, this);
  const Field* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Field>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.Field)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.Field)
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_type()) {
    _internal_mutable_type()->::ntt::Type::MergeFrom(from._internal_type());
  }
}

void Field::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  return true;
}

void Field::InternalSwap(Field* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Field::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StructType::InitAsDefaultInstance() {
}
class StructType::_Internal {
 public:
};

StructType::StructType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.StructType)
}
StructType::StructType(const StructType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ntt.StructType)
}

void StructType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Field_type_2eproto.base);
}

StructType::~StructType() {
  // @@protoc_insertion_point(destructor:ntt.StructType)
  SharedDtor();
}

void StructType::SharedDtor() {
}

void StructType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StructType& StructType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Field_type_2eproto.base);
  return *internal_default_instance();
}


void StructType::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.StructType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear();
}

const char* StructType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ntt.Field fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StructType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.StructType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ntt.Field fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.StructType)
  return target;
}

size_t StructType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.StructType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ntt.Field fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.StructType)
  GOOGLE_DCHECK_NE(&from, this);
  const StructType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StructType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.StructType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.StructType)
    MergeFrom(*source);
  }
}

void StructType::MergeFrom(const StructType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.StructType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void StructType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.StructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StructType::CopyFrom(const StructType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.StructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructType::IsInitialized() const {
  return true;
}

void StructType::InternalSwap(StructType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListType::InitAsDefaultInstance() {
  ::ntt::_ListType_default_instance_._instance.get_mutable()->element_ = const_cast< ::ntt::Type*>(
      ::ntt::Type::internal_default_instance());
  ::ntt::_ListType_default_instance_._instance.get_mutable()->constraint_ = const_cast< ::ntt::Constraint*>(
      ::ntt::Constraint::internal_default_instance());
}
class ListType::_Internal {
 public:
  static const ::ntt::Type& element(const ListType* msg);
  static const ::ntt::Constraint& constraint(const ListType* msg);
};

const ::ntt::Type&
ListType::_Internal::element(const ListType* msg) {
  return *msg->element_;
}
const ::ntt::Constraint&
ListType::_Internal::constraint(const ListType* msg) {
  return *msg->constraint_;
}
ListType::ListType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.ListType)
}
ListType::ListType(const ListType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_element()) {
    element_ = new ::ntt::Type(*from.element_);
  } else {
    element_ = nullptr;
  }
  if (from._internal_has_constraint()) {
    constraint_ = new ::ntt::Constraint(*from.constraint_);
  } else {
    constraint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ntt.ListType)
}

void ListType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Field_type_2eproto.base);
  ::memset(&element_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constraint_) -
      reinterpret_cast<char*>(&element_)) + sizeof(constraint_));
}

ListType::~ListType() {
  // @@protoc_insertion_point(destructor:ntt.ListType)
  SharedDtor();
}

void ListType::SharedDtor() {
  if (this != internal_default_instance()) delete element_;
  if (this != internal_default_instance()) delete constraint_;
}

void ListType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListType& ListType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Field_type_2eproto.base);
  return *internal_default_instance();
}


void ListType::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.ListType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && element_ != nullptr) {
    delete element_;
  }
  element_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && constraint_ != nullptr) {
    delete constraint_;
  }
  constraint_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ntt.Type element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_element(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ntt.Constraint constraint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.ListType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ntt.Type element = 1;
  if (this->has_element()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::element(this), target, stream);
  }

  // .ntt.Constraint constraint = 3;
  if (this->has_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::constraint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.ListType)
  return target;
}

size_t ListType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.ListType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ntt.Type element = 1;
  if (this->has_element()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *element_);
  }

  // .ntt.Constraint constraint = 3;
  if (this->has_constraint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constraint_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.ListType)
  GOOGLE_DCHECK_NE(&from, this);
  const ListType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.ListType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.ListType)
    MergeFrom(*source);
  }
}

void ListType::MergeFrom(const ListType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.ListType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_element()) {
    _internal_mutable_element()->::ntt::Type::MergeFrom(from._internal_element());
  }
  if (from.has_constraint()) {
    _internal_mutable_constraint()->::ntt::Constraint::MergeFrom(from._internal_constraint());
  }
}

void ListType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.ListType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListType::CopyFrom(const ListType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.ListType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListType::IsInitialized() const {
  return true;
}

void ListType::InternalSwap(ListType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(element_, other->element_);
  swap(constraint_, other->constraint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StringType::InitAsDefaultInstance() {
}
class StringType::_Internal {
 public:
};

StringType::StringType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.StringType)
}
StringType::StringType(const StringType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  element_width_ = from.element_width_;
  // @@protoc_insertion_point(copy_constructor:ntt.StringType)
}

void StringType::SharedCtor() {
  element_width_ = 0;
}

StringType::~StringType() {
  // @@protoc_insertion_point(destructor:ntt.StringType)
  SharedDtor();
}

void StringType::SharedDtor() {
}

void StringType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringType& StringType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringType_type_2eproto.base);
  return *internal_default_instance();
}


void StringType::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.StringType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_width_ = 0;
  _internal_metadata_.Clear();
}

const char* StringType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 element_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          element_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.StringType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 element_width = 1;
  if (this->element_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_element_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.StringType)
  return target;
}

size_t StringType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.StringType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 element_width = 1;
  if (this->element_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_element_width());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.StringType)
  GOOGLE_DCHECK_NE(&from, this);
  const StringType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.StringType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.StringType)
    MergeFrom(*source);
  }
}

void StringType::MergeFrom(const StringType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.StringType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.element_width() != 0) {
    _internal_set_element_width(from._internal_element_width());
  }
}

void StringType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.StringType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringType::CopyFrom(const StringType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.StringType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringType::IsInitialized() const {
  return true;
}

void StringType::InternalSwap(StringType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(element_width_, other->element_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Constraint_Bounds::InitAsDefaultInstance() {
}
class Constraint_Bounds::_Internal {
 public:
};

Constraint_Bounds::Constraint_Bounds()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.Constraint.Bounds)
}
Constraint_Bounds::Constraint_Bounds(const Constraint_Bounds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:ntt.Constraint.Bounds)
}

void Constraint_Bounds::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

Constraint_Bounds::~Constraint_Bounds() {
  // @@protoc_insertion_point(destructor:ntt.Constraint.Bounds)
  SharedDtor();
}

void Constraint_Bounds::SharedDtor() {
}

void Constraint_Bounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Constraint_Bounds& Constraint_Bounds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Constraint_Bounds_type_2eproto.base);
  return *internal_default_instance();
}


void Constraint_Bounds::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.Constraint.Bounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

const char* Constraint_Bounds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Constraint_Bounds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.Constraint.Bounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start(), target);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.Constraint.Bounds)
  return target;
}

size_t Constraint_Bounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.Constraint.Bounds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start());
  }

  // int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Constraint_Bounds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.Constraint.Bounds)
  GOOGLE_DCHECK_NE(&from, this);
  const Constraint_Bounds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Constraint_Bounds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.Constraint.Bounds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.Constraint.Bounds)
    MergeFrom(*source);
  }
}

void Constraint_Bounds::MergeFrom(const Constraint_Bounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.Constraint.Bounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
}

void Constraint_Bounds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.Constraint.Bounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Constraint_Bounds::CopyFrom(const Constraint_Bounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.Constraint.Bounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constraint_Bounds::IsInitialized() const {
  return true;
}

void Constraint_Bounds::InternalSwap(Constraint_Bounds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Constraint_Bounds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Constraint::InitAsDefaultInstance() {
}
class Constraint::_Internal {
 public:
};

Constraint::Constraint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.Constraint)
}
Constraint::Constraint(const Constraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ntt.Constraint)
}

void Constraint::SharedCtor() {
}

Constraint::~Constraint() {
  // @@protoc_insertion_point(destructor:ntt.Constraint)
  SharedDtor();
}

void Constraint::SharedDtor() {
}

void Constraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Constraint& Constraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Constraint_type_2eproto.base);
  return *internal_default_instance();
}


void Constraint::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.Constraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* Constraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Constraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.Constraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.Constraint)
  return target;
}

size_t Constraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.Constraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Constraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.Constraint)
  GOOGLE_DCHECK_NE(&from, this);
  const Constraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Constraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.Constraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.Constraint)
    MergeFrom(*source);
  }
}

void Constraint::MergeFrom(const Constraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.Constraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Constraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.Constraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Constraint::CopyFrom(const Constraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.Constraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constraint::IsInitialized() const {
  return true;
}

void Constraint::InternalSwap(Constraint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Constraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComponentType::InitAsDefaultInstance() {
}
class ComponentType::_Internal {
 public:
};

ComponentType::ComponentType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.ComponentType)
}
ComponentType::ComponentType(const ComponentType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ntt.ComponentType)
}

void ComponentType::SharedCtor() {
}

ComponentType::~ComponentType() {
  // @@protoc_insertion_point(destructor:ntt.ComponentType)
  SharedDtor();
}

void ComponentType::SharedDtor() {
}

void ComponentType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentType& ComponentType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComponentType_type_2eproto.base);
  return *internal_default_instance();
}


void ComponentType::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.ComponentType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ComponentType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.ComponentType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.ComponentType)
  return target;
}

size_t ComponentType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.ComponentType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.ComponentType)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.ComponentType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.ComponentType)
    MergeFrom(*source);
  }
}

void ComponentType::MergeFrom(const ComponentType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.ComponentType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ComponentType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.ComponentType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentType::CopyFrom(const ComponentType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.ComponentType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentType::IsInitialized() const {
  return true;
}

void ComponentType::InternalSwap(ComponentType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnumType::InitAsDefaultInstance() {
}
class EnumType::_Internal {
 public:
};

EnumType::EnumType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.EnumType)
}
EnumType::EnumType(const EnumType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ntt.EnumType)
}

void EnumType::SharedCtor() {
}

EnumType::~EnumType() {
  // @@protoc_insertion_point(destructor:ntt.EnumType)
  SharedDtor();
}

void EnumType::SharedDtor() {
}

void EnumType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnumType& EnumType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnumType_type_2eproto.base);
  return *internal_default_instance();
}


void EnumType::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.EnumType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* EnumType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnumType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.EnumType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.EnumType)
  return target;
}

size_t EnumType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.EnumType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnumType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.EnumType)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnumType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.EnumType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.EnumType)
    MergeFrom(*source);
  }
}

void EnumType::MergeFrom(const EnumType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.EnumType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EnumType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.EnumType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumType::CopyFrom(const EnumType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.EnumType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumType::IsInitialized() const {
  return true;
}

void EnumType::InternalSwap(EnumType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnumType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PortType::InitAsDefaultInstance() {
}
class PortType::_Internal {
 public:
};

PortType::PortType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.PortType)
}
PortType::PortType(const PortType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ntt.PortType)
}

void PortType::SharedCtor() {
}

PortType::~PortType() {
  // @@protoc_insertion_point(destructor:ntt.PortType)
  SharedDtor();
}

void PortType::SharedDtor() {
}

void PortType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PortType& PortType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PortType_type_2eproto.base);
  return *internal_default_instance();
}


void PortType::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.PortType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PortType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.PortType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.PortType)
  return target;
}

size_t PortType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.PortType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.PortType)
  GOOGLE_DCHECK_NE(&from, this);
  const PortType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PortType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.PortType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.PortType)
    MergeFrom(*source);
  }
}

void PortType::MergeFrom(const PortType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.PortType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PortType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.PortType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortType::CopyFrom(const PortType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.PortType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortType::IsInitialized() const {
  return true;
}

void PortType::InternalSwap(PortType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimerType::InitAsDefaultInstance() {
}
class TimerType::_Internal {
 public:
};

TimerType::TimerType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntt.TimerType)
}
TimerType::TimerType(const TimerType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ntt.TimerType)
}

void TimerType::SharedCtor() {
}

TimerType::~TimerType() {
  // @@protoc_insertion_point(destructor:ntt.TimerType)
  SharedDtor();
}

void TimerType::SharedDtor() {
}

void TimerType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimerType& TimerType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimerType_type_2eproto.base);
  return *internal_default_instance();
}


void TimerType::Clear() {
// @@protoc_insertion_point(message_clear_start:ntt.TimerType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* TimerType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimerType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntt.TimerType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntt.TimerType)
  return target;
}

size_t TimerType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntt.TimerType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimerType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntt.TimerType)
  GOOGLE_DCHECK_NE(&from, this);
  const TimerType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimerType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntt.TimerType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntt.TimerType)
    MergeFrom(*source);
  }
}

void TimerType::MergeFrom(const TimerType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntt.TimerType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TimerType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntt.TimerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerType::CopyFrom(const TimerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntt.TimerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerType::IsInitialized() const {
  return true;
}

void TimerType::InternalSwap(TimerType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimerType::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ntt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ntt::Type* Arena::CreateMaybeMessage< ::ntt::Type >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::Type >(arena);
}
template<> PROTOBUF_NOINLINE ::ntt::Field* Arena::CreateMaybeMessage< ::ntt::Field >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::Field >(arena);
}
template<> PROTOBUF_NOINLINE ::ntt::StructType* Arena::CreateMaybeMessage< ::ntt::StructType >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::StructType >(arena);
}
template<> PROTOBUF_NOINLINE ::ntt::ListType* Arena::CreateMaybeMessage< ::ntt::ListType >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::ListType >(arena);
}
template<> PROTOBUF_NOINLINE ::ntt::StringType* Arena::CreateMaybeMessage< ::ntt::StringType >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::StringType >(arena);
}
template<> PROTOBUF_NOINLINE ::ntt::Constraint_Bounds* Arena::CreateMaybeMessage< ::ntt::Constraint_Bounds >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::Constraint_Bounds >(arena);
}
template<> PROTOBUF_NOINLINE ::ntt::Constraint* Arena::CreateMaybeMessage< ::ntt::Constraint >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::Constraint >(arena);
}
template<> PROTOBUF_NOINLINE ::ntt::ComponentType* Arena::CreateMaybeMessage< ::ntt::ComponentType >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::ComponentType >(arena);
}
template<> PROTOBUF_NOINLINE ::ntt::EnumType* Arena::CreateMaybeMessage< ::ntt::EnumType >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::EnumType >(arena);
}
template<> PROTOBUF_NOINLINE ::ntt::PortType* Arena::CreateMaybeMessage< ::ntt::PortType >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::PortType >(arena);
}
template<> PROTOBUF_NOINLINE ::ntt::TimerType* Arena::CreateMaybeMessage< ::ntt::TimerType >(Arena* arena) {
  return Arena::CreateInternal< ::ntt::TimerType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
