// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parameter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parameter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parameter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "value.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parameter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parameter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parameter_2eproto;
namespace ntt {
class Parameter;
class ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
}  // namespace ntt
PROTOBUF_NAMESPACE_OPEN
template<> ::ntt::Parameter* Arena::CreateMaybeMessage<::ntt::Parameter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ntt {

enum Parameter_Direction : int {
  Parameter_Direction_IN = 0,
  Parameter_Direction_OUT = 1,
  Parameter_Direction_INOUT = 2,
  Parameter_Direction_Parameter_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Parameter_Direction_Parameter_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Parameter_Direction_IsValid(int value);
constexpr Parameter_Direction Parameter_Direction_Direction_MIN = Parameter_Direction_IN;
constexpr Parameter_Direction Parameter_Direction_Direction_MAX = Parameter_Direction_INOUT;
constexpr int Parameter_Direction_Direction_ARRAYSIZE = Parameter_Direction_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Parameter_Direction_descriptor();
template<typename T>
inline const std::string& Parameter_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Parameter_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Parameter_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Parameter_Direction_descriptor(), enum_t_value);
}
inline bool Parameter_Direction_Parse(
    const std::string& name, Parameter_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Parameter_Direction>(
    Parameter_Direction_descriptor(), name, value);
}
// ===================================================================

class Parameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ntt.Parameter) */ {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter& operator=(Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parameter* New() const final {
    return CreateMaybeMessage<Parameter>(nullptr);
  }

  Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ntt.Parameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parameter_2eproto);
    return ::descriptor_table_parameter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Parameter_Direction Direction;
  static constexpr Direction IN =
    Parameter_Direction_IN;
  static constexpr Direction OUT =
    Parameter_Direction_OUT;
  static constexpr Direction INOUT =
    Parameter_Direction_INOUT;
  static inline bool Direction_IsValid(int value) {
    return Parameter_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    Parameter_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    Parameter_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    Parameter_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return Parameter_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return Parameter_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(const std::string& name,
      Direction* value) {
    return Parameter_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kDirectionFieldNumber = 1,
  };
  // .ntt.Value value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::ntt::Value& value() const;
  ::ntt::Value* release_value();
  ::ntt::Value* mutable_value();
  void set_allocated_value(::ntt::Value* value);
  private:
  const ::ntt::Value& _internal_value() const;
  ::ntt::Value* _internal_mutable_value();
  public:

  // .ntt.Parameter.Direction direction = 1;
  void clear_direction();
  ::ntt::Parameter_Direction direction() const;
  void set_direction(::ntt::Parameter_Direction value);
  private:
  ::ntt::Parameter_Direction _internal_direction() const;
  void _internal_set_direction(::ntt::Parameter_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:ntt.Parameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ntt::Value* value_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parameter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Parameter

// .ntt.Parameter.Direction direction = 1;
inline void Parameter::clear_direction() {
  direction_ = 0;
}
inline ::ntt::Parameter_Direction Parameter::_internal_direction() const {
  return static_cast< ::ntt::Parameter_Direction >(direction_);
}
inline ::ntt::Parameter_Direction Parameter::direction() const {
  // @@protoc_insertion_point(field_get:ntt.Parameter.direction)
  return _internal_direction();
}
inline void Parameter::_internal_set_direction(::ntt::Parameter_Direction value) {
  
  direction_ = value;
}
inline void Parameter::set_direction(::ntt::Parameter_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:ntt.Parameter.direction)
}

// .ntt.Value value = 2;
inline bool Parameter::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Parameter::has_value() const {
  return _internal_has_value();
}
inline const ::ntt::Value& Parameter::_internal_value() const {
  const ::ntt::Value* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ntt::Value*>(
      &::ntt::_Value_default_instance_);
}
inline const ::ntt::Value& Parameter::value() const {
  // @@protoc_insertion_point(field_get:ntt.Parameter.value)
  return _internal_value();
}
inline ::ntt::Value* Parameter::release_value() {
  // @@protoc_insertion_point(field_release:ntt.Parameter.value)
  
  ::ntt::Value* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::ntt::Value* Parameter::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::ntt::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::ntt::Value* Parameter::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ntt.Parameter.value)
  return _internal_mutable_value();
}
inline void Parameter::set_allocated_value(::ntt::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:ntt.Parameter.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ntt

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ntt::Parameter_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ntt::Parameter_Direction>() {
  return ::ntt::Parameter_Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parameter_2eproto
