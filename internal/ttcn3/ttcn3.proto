// The messages in this file describe TTCN-3 types and values.

syntax = "proto3";
package ttcn3;

message Value { Type type = 1; }

message Type {
  string name = 1;

  enum Kind {
    INVALID = 0;
    ADDRESS = 1;
    ANYTYPE = 2;
    BITSTRING = 3;
    BOOLEAN = 4;
    CHARSTRING = 5;
    COMPONENT = 6;
    ENUMERATED = 7;
    FLOAT = 8;
    HEXTSTRING = 9;
    OCTETSTRING = 10;
    RECORD = 11;
    RECORDOF = 12;
    ARRAY = 13;
    SET = 14;
    SETOF = 15;
    UNION = 16;
    UNIVERSALCHARSTRING = 17;
    VERDICT = 18;
    DEFAULT = 19;
    PORT = 20;
    TIMER = 21;
  }

  Kind kind = 2;

  message Basic {}
  message String { int32 element_bits = 1; }
  message List { Type element = 1; }
  message Struct { repeated Type fields = 1; }

  oneof concreteType {
    Basic basic_type = 1;
    String strin_tType = 2;
    List list_type = 3;
    Struct Struct_type = 3;
  }
  string encode = 3;
  string variant = 4;
  string extension = 5;
}

message Message {
  int32 nbits = 1;
  bytes data = 2;
}

message Parameter {
  enum Direction {
    IN = 0;
    OUT = 1;
    INOUT = 2;
  }
  Direction direction = 1;
  Value value = 2;
}

service Codec {
  rpc Encode(Value) returns (Blob) {}
  rpc Decode(DecodeRequest) returns (DecodeResponse) {}
}

message DecodeRequest {
  Message msg = 1;
  Type type = 2;
}

message DecodeResponse {
  Value value = 1;
  int32 nbits = 2;
}

service SystemAdapter {
  rpc Reset() {}
  rpc Prepare(PrepareMessage) {}
  rpc Map(MapRequest) {}
  rpc UnMap(MapRequest) {}
  rpc Finish() {}
  rpc Send() {}
  rpc Call() {}
  rpc Reply() {}
  rpc Raise() {}
  rpc CommunicationEvents() returns (stream CommunicationEvent) {}
}

message PrepareMessage {
  string test_id = 1;
  repeated string port_ids = 2;
}

message MapRequest {
  string port_id = 1;
  string comp_id = 2;
  repeated Parameter params = 3;
}

message CommunicationEvent {
  //* Error
  //* EnqueueMessage
  //* EnqueueCall
  //* EnqueueReply
  //* EnqueueException
}

/*

## Test Management (TCI-TM)

 * TE <-- RootModule
 * TE <-| ImportedModules returns modules
 * TE <-| ModuleParameters returns params
 * TE <-| Testcases returns tests
 * TE <-| TestcaseParameters returns params
 * TE <-| TestcaseTSI returns ports
 * TE <-- StartTestcase
 * TE <-- StopTestcase
 * TE <-- StartControl
 * TE <-- StartControlWithParams
 * TE <-- StopControl
 * TE <-- ControlParameters

**Notifications**

 * TM <-- TestcaseStarted
 * TM <-- TastcaseTerminated
 * TM <-- ControlTerminated
 * TM <-- Log
 * TM <-- Error
 * TM <-| GetModulePar returns Value
 */
service Runtime { rpc ListTests() return }

